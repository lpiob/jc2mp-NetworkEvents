class 'NetworkEvents'

function NetworkEvents:__init()
  Events:Subscribe("NE:Broadcast", self, self.BroadcastHandler)
  Network:Subscribe("NE:Subscribe", self, self.SubscribeHandler)
end

-- list of client events that are handled in this module
NetworkEvents.moduleHandlesClientEvents={} 


--- Replacement Network:Broadcast, that allows cross-module communication
-- works by transmitting this as event to all modules with NetworkEvents script
-- which then retransmit them to clients using NetworkEvents.BroadcastHandler
function NetworkEvents.Broadcast(self,name,data)
  -- send to other modules, server-side
  Events:Fire("NE:Broadcast", {name=name, data=data})
end


--- Event Handler: Receives Events from other modules and transmit them to 
-- clients, if any of them is willing to handle
function NetworkEvents.BroadcastHandler(self,data)
  if not self.moduleHandlesClientEvents[data.name] then 
    return 
  end
  Network:Broadcast(data.name, data.data)
end


--- Network handler: register events being handled in this module
-- handles events generated by NetworkEventsClient:Subscribe
function NetworkEvents.SubscribeHandler(self, arg)
  if not arg or type(arg)~="string" then return end
  self.moduleHandlesClientEvents[arg]=true
end

--- Initialized server-side NetworkEvents instance
NetworkEvents=NetworkEvents()
